import json
import logging

import pytest
from tests.functional.services.policy_engine.utils import images_api
from tests.functional.services.utils import http_utils


@pytest.mark.parametrize(
    "image_digest",
    [
        "sha256:5cdf314fac24ae12210a2cf085f44ae58a3d2c1cb751151eead6f70be9d591ed",  # alpine-test
        "sha256:5140fda11677dabf76cd1b83217e9929303555e112afd6a226f24caaf512c6ee",  # debian-10-8
    ],
)
class TestVulnerabilityScanner:
    def test_image_load_schema(self, image_digest, ingress_image, ingress_jsonschema):
        image_load_resp: http_utils.APIResponse = ingress_image(image_digest)
        assert image_load_resp == http_utils.APIResponse(200)
        is_valid: bool = ingress_jsonschema.is_valid(image_load_resp.body)
        if not is_valid:
            for err in ingress_jsonschema.iter_errors(image_load_resp.body):
                logging.error(err)
        assert is_valid

    def test_get_vulnerabilities_schema(
        self, image_digest, image_digest_id_map, ingress_image, vulnerability_jsonschema
    ):
        ingress_image(image_digest)
        image_id = image_digest_id_map[image_digest]
        images_vuln_resp: http_utils.APIResponse = images_api.get_image_vulnerabilites(
            image_id
        )
        assert images_vuln_resp == http_utils.APIResponse(200)
        is_valid: bool = vulnerability_jsonschema.is_valid(images_vuln_resp.body)
        if not is_valid:
            for err in vulnerability_jsonschema.iter_errors(images_vuln_resp.body):
                logging.error(err)
        assert is_valid
        with open(f"{image_digest}.json", "w") as f:
            import json

            f.write(json.dumps(images_vuln_resp.body))

    def test_image_load_content(self, image_digest, ingress_image, expected_content):
        image_load_resp: http_utils.APIResponse = ingress_image(image_digest)
        assert image_load_resp == http_utils.APIResponse(200)
        expected_content = expected_content(image_digest)
        actual_legacy_rowcount = image_load_resp.body["vulnerability_report"][
            "legacy_report"
        ]["multi"]["result"]["rowcount"]
        expected_legacy_rowcount = expected_content["legacy_report"]["multi"]["result"][
            "rowcount"
        ]
        assert actual_legacy_rowcount >= expected_legacy_rowcount
        expected_legacy_rows = set(
            [
                tuple(x)
                for x in expected_content["legacy_report"]["multi"]["result"]["rows"]
            ]
        )
        actual_legacy_rows = set(
            [
                tuple(x)
                for x in image_load_resp.body["vulnerability_report"]["legacy_report"][
                    "multi"
                ]["result"]["rows"]
            ]
        )
        if not actual_legacy_rows >= expected_legacy_rows:
            logging.error(
                f"Expected vulnerabilities missing:\n{expected_legacy_rows - actual_legacy_rows}"
            )
        assert actual_legacy_rows >= expected_legacy_rows
        expected_cpes = set([json.dumps(x) for x in expected_content["cpe_report"]])
        actual_cpes = set(
            [
                json.dumps(x)
                for x in image_load_resp.body["vulnerability_report"]["cpe_report"]
            ]
        )
        if not actual_cpes >= expected_cpes:
            logging.error(
                f"Expected vulnerabilities missing:\n{expected_cpes - actual_cpes}"
            )
        assert actual_cpes >= expected_cpes

    def test_get_vulnerabilities_content(
        self, image_digest, image_digest_id_map, ingress_image, expected_content
    ):
        ingress_image(image_digest)
        image_id = image_digest_id_map[image_digest]
        images_vuln_resp: http_utils.APIResponse = images_api.get_image_vulnerabilites(
            image_id
        )
        assert images_vuln_resp == http_utils.APIResponse(200)
        expected_content = expected_content(image_digest)
        actual_legacy_rowcount = images_vuln_resp.body["legacy_report"]["multi"][
            "result"
        ]["rowcount"]
        expected_legacy_rowcount = expected_content["legacy_report"]["multi"]["result"][
            "rowcount"
        ]
        assert actual_legacy_rowcount >= expected_legacy_rowcount
        expected_legacy_rows = set(
            [
                tuple(x)
                for x in expected_content["legacy_report"]["multi"]["result"]["rows"]
            ]
        )
        actual_legacy_rows = set(
            [
                tuple(x)
                for x in images_vuln_resp.body["legacy_report"]["multi"]["result"][
                    "rows"
                ]
            ]
        )
        if not actual_legacy_rows >= expected_legacy_rows:
            logging.error(
                f"Expected vulnerabilities missing:\n{expected_legacy_rows-actual_legacy_rows}"
            )
        assert actual_legacy_rows >= expected_legacy_rows
        expected_cpes = set([json.dumps(x) for x in expected_content["cpe_report"]])
        actual_cpes = set([json.dumps(x) for x in images_vuln_resp.body["cpe_report"]])
        if not actual_cpes >= expected_cpes:
            logging.error(
                f"Expected vulnerabilities missing:\n{expected_cpes-actual_cpes}"
            )
        assert actual_cpes >= expected_cpes
