import logging

import pytest

from tests.functional.services.policy_engine.utils import images_api
from tests.functional.services.utils import http_utils


@pytest.mark.parametrize(
    "image_digest",
    [
        "sha256:4661fb57f7890b9145907a1fe2555091d333ff3d28db86c3bb906f6a2be93c87",
        "sha256:dbbacecc49b088458781c16f3775f2a2ec7521079034a7ba499c8b0bb7f86875",
    ],
)
class TestVulnerabilityScanner:
    def test_image_load(self, image_digest, ingress_image, ingress_jsonschema):
        image_load_resp: http_utils.APIResponse = ingress_image(image_digest)
        assert image_load_resp == http_utils.APIResponse(200)
        is_valid: bool = ingress_jsonschema.is_valid(image_load_resp.body)
        if not is_valid:
            for err in ingress_jsonschema.iter_errors(image_load_resp.body):
                logging.error(err)
        assert is_valid

    def test_get_vulnerabilities(
        self, image_digest, image_digest_id_map, ingress_image, vulnerability_jsonschema
    ):
        ingress_image(image_digest)
        image_id = image_digest_id_map[image_digest]
        images_vuln_resp: http_utils.APIResponse = images_api.get_image_vulnerabilites(
            image_id
        )
        assert images_vuln_resp == http_utils.APIResponse(200)
        is_valid: bool = vulnerability_jsonschema.is_valid(images_vuln_resp.body)
        if not is_valid:
            for err in vulnerability_jsonschema.iter_errors(images_vuln_resp.body):
                logging.error(err)
        assert is_valid
