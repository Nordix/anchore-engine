import logging
from dataclasses import asdict
from itertools import combinations

import pytest
import tests.functional.services.policy_engine.utils.api as policy_engine_api
from tests.functional.services.policy_engine.utils.utils import (
    ImagesByVulnerabilityQuery,
    ImagesByVulnerabilityQueryOptions,
)


class TestQueryByVulnerability:
    @pytest.mark.parametrize(
        "query",
        [
            ImagesByVulnerabilityQuery(
                "CVE-2013-2512",
                None,
                affected_images=[
                    "sha256:80a31c3ce2e99c3691c27ac3b1753163214494e9b2ca07bfdccf29a5cca2bfbe",
                    "sha256:406413437f26223183d133ccc7186f24c827729e1b21adc7330dd43fcdc030b3",
                    "sha256:fe3ca35038008b0eac0fa4e686bd072c9430000ab7d7853001bde5f5b8ccf60c",
                ],
            ),
            ImagesByVulnerabilityQuery(
                "GHSA-h6q6-9hqw-rwfv",
                None,
                affected_images=[
                    "sha256:80a31c3ce2e99c3691c27ac3b1753163214494e9b2ca07bfdccf29a5cca2bfbe",
                    "sha256:406413437f26223183d133ccc7186f24c827729e1b21adc7330dd43fcdc030b3",
                    "sha256:fe3ca35038008b0eac0fa4e686bd072c9430000ab7d7853001bde5f5b8ccf60c",
                ],
            ),
            ImagesByVulnerabilityQuery(
                "CVE-2021-21330",
                None,
                affected_images=[
                    "sha256:80a31c3ce2e99c3691c27ac3b1753163214494e9b2ca07bfdccf29a5cca2bfbe",
                    "sha256:406413437f26223183d133ccc7186f24c827729e1b21adc7330dd43fcdc030b3",
                    "sha256:fe3ca35038008b0eac0fa4e686bd072c9430000ab7d7853001bde5f5b8ccf60c",
                ],
            ),
            ImagesByVulnerabilityQuery(
                "CVE-2020-8908",
                None,
                affected_images=[
                    "sha256:80a31c3ce2e99c3691c27ac3b1753163214494e9b2ca07bfdccf29a5cca2bfbe",
                    "sha256:406413437f26223183d133ccc7186f24c827729e1b21adc7330dd43fcdc030b3",
                    "sha256:fe3ca35038008b0eac0fa4e686bd072c9430000ab7d7853001bde5f5b8ccf60c",
                ],
            ),
            ImagesByVulnerabilityQuery(
                "CVE-2020-8177",
                None,
                affected_images=[
                    "sha256:fe3ca35038008b0eac0fa4e686bd072c9430000ab7d7853001bde5f5b8ccf60c"
                ],
            ),
            ImagesByVulnerabilityQuery(
                "CVE-2020-8177",
                ImagesByVulnerabilityQueryOptions(severity="High"),
                affected_images=[],
            ),
            ImagesByVulnerabilityQuery(
                "CVE-2020-8177",
                ImagesByVulnerabilityQueryOptions(namespace="debian:10"),
                affected_images=[],
            ),
            ImagesByVulnerabilityQuery(
                "CVE-2020-8177",
                ImagesByVulnerabilityQueryOptions(affected_package="gnupg2-2.0.22"),
                affected_images=[],
            ),
            ImagesByVulnerabilityQuery("CVE-2020-0000", None, affected_images=[]),
        ],
    )
    def test_query_by_vulnerability(
        self, query_by_vuln_jsonschema, ingress_all_images, query
    ):
        query_metadata = {}
        if isinstance(query.query_metadata, ImagesByVulnerabilityQueryOptions):
            query_metadata = asdict(query.query_metadata)
        get_image_resp = policy_engine_api.users.get_images_by_vulnerability(
            vulnerability_id=query.vulnerability_id, **query_metadata
        )
        assert get_image_resp.code <= 300
        is_valid: bool = query_by_vuln_jsonschema.is_valid(get_image_resp.body)
        if not is_valid:
            for err in query_by_vuln_jsonschema.iter_errors(get_image_resp.body):
                logging.error(err)
        assert is_valid
        results = set(
            [
                image["image"]["imageDigest"]
                for image in get_image_resp.body["vulnerable_images"]
            ]
        )
        assert results == set(query.affected_images)

    @pytest.mark.parametrize(
        "query",
        [
            ImagesByVulnerabilityQuery(
                "GHSA-5mg8-w23w-74h3",
                ImagesByVulnerabilityQueryOptions(
                    "Medium", "github:java", "guava", False
                ),
                [
                    "sha256:80a31c3ce2e99c3691c27ac3b1753163214494e9b2ca07bfdccf29a5cca2bfbe",
                    "sha256:406413437f26223183d133ccc7186f24c827729e1b21adc7330dd43fcdc030b3",
                    "sha256:fe3ca35038008b0eac0fa4e686bd072c9430000ab7d7853001bde5f5b8ccf60c",
                ],
            ),
            ImagesByVulnerabilityQuery(
                "CVE-2011-3374",
                ImagesByVulnerabilityQueryOptions(
                    "Negligible", "debian:10", "libapt-pkg5.0", False
                ),
                [
                    "sha256:406413437f26223183d133ccc7186f24c827729e1b21adc7330dd43fcdc030b3"
                ],
            ),
            ImagesByVulnerabilityQuery(
                "CVE-2020-8177",
                ImagesByVulnerabilityQueryOptions("Medium", "rhel:7", "curl", False),
                [
                    "sha256:fe3ca35038008b0eac0fa4e686bd072c9430000ab7d7853001bde5f5b8ccf60c"
                ],
            ),
        ],
    )
    def test_query_by_vulnerability_arg_combinations(
        self,
        query_by_vuln_jsonschema,
        ingress_all_images,
        query,
    ):
        query_fields = [(k, v) for k, v in asdict(query.query_metadata).items()]
        for r in range(1, len(query_fields)):
            for query_combination in combinations(query_fields, r):
                query_dict = {k: v for k, v in query_combination}
                get_image_resp = policy_engine_api.users.get_images_by_vulnerability(
                    vulnerability_id=query.vulnerability_id, **query_dict
                )
                assert get_image_resp.code <= 300
                is_valid: bool = query_by_vuln_jsonschema.is_valid(get_image_resp.body)
                if not is_valid:
                    for err in query_by_vuln_jsonschema.iter_errors(
                        get_image_resp.body
                    ):
                        logging.error(err)
                assert is_valid
                results = set(
                    [
                        image["image"]["imageDigest"]
                        for image in get_image_resp.body["vulnerable_images"]
                    ]
                )
                assert results == set(query.affected_images)
