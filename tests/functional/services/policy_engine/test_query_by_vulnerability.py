from dataclasses import asdict
from itertools import combinations

import pytest

import tests.functional.services.policy_engine.utils.api as policy_engine_api
from tests.functional.services.policy_engine.utils.utils import (
    ImagesByVulnerabilityQuery,
    ImagesByVulnerabilityQueryOptions,
)


class TestQueryByVulnerability:
    @pytest.mark.parametrize(
        "query",
        [
            ImagesByVulnerabilityQuery(
                "CVE-2013-2512",
                [
                    "sha256:80a31c3ce2e99c3691c27ac3b1753163214494e9b2ca07bfdccf29a5cca2bfbe",
                    "sha256:406413437f26223183d133ccc7186f24c827729e1b21adc7330dd43fcdc030b3",
                    "sha256:fe3ca35038008b0eac0fa4e686bd072c9430000ab7d7853001bde5f5b8ccf60c",
                ],
            ),
            ImagesByVulnerabilityQuery(
                "GHSA-h6q6-9hqw-rwfv",
                [
                    "sha256:80a31c3ce2e99c3691c27ac3b1753163214494e9b2ca07bfdccf29a5cca2bfbe",
                    "sha256:406413437f26223183d133ccc7186f24c827729e1b21adc7330dd43fcdc030b3",
                    "sha256:fe3ca35038008b0eac0fa4e686bd072c9430000ab7d7853001bde5f5b8ccf60c",
                ],
            ),
            ImagesByVulnerabilityQuery(
                "CVE-2021-21330",
                [
                    "sha256:80a31c3ce2e99c3691c27ac3b1753163214494e9b2ca07bfdccf29a5cca2bfbe",
                    "sha256:406413437f26223183d133ccc7186f24c827729e1b21adc7330dd43fcdc030b3",
                    "sha256:fe3ca35038008b0eac0fa4e686bd072c9430000ab7d7853001bde5f5b8ccf60c",
                ],
            ),
            ImagesByVulnerabilityQuery(
                "CVE-2020-8908",
                [
                    "sha256:80a31c3ce2e99c3691c27ac3b1753163214494e9b2ca07bfdccf29a5cca2bfbe",
                    "sha256:406413437f26223183d133ccc7186f24c827729e1b21adc7330dd43fcdc030b3",
                    "sha256:fe3ca35038008b0eac0fa4e686bd072c9430000ab7d7853001bde5f5b8ccf60c",
                ],
            ),
            ImagesByVulnerabilityQuery(
                "CVE-2020-8177",
                [
                    "sha256:fe3ca35038008b0eac0fa4e686bd072c9430000ab7d7853001bde5f5b8ccf60c"
                ],
            ),
            ImagesByVulnerabilityQuery(
                "CVE-2020-8177",
                [],
                ImagesByVulnerabilityQueryOptions(severity="High"),
            ),
            ImagesByVulnerabilityQuery(
                "CVE-2020-8177",
                [],
                ImagesByVulnerabilityQueryOptions(namespace="debian:10"),
            ),
            ImagesByVulnerabilityQuery(
                "CVE-2020-8177",
                [],
                ImagesByVulnerabilityQueryOptions(affected_package="gnupg2-2.0.22"),
            ),
            ImagesByVulnerabilityQuery("CVE-2020-0000", []),
        ],
    )
    def test_query_by_vulnerability(self, schema_validator, ingress_all_images, query):
        get_image_resp = policy_engine_api.users.get_images_by_vulnerability(
            vulnerability_id=query.vulnerability_id, **asdict(query.query_metadata)
        )
        assert get_image_resp.code <= 300
        query_by_vuln_schema_validator = schema_validator(
            "query_by_vulnerability.schema.json"
        )
        is_valid: bool = query_by_vuln_schema_validator.is_valid(get_image_resp.body)
        assert is_valid, "\n".join(
            [
                str(e)
                for e in query_by_vuln_schema_validator.iter_errors(get_image_resp.body)
            ]
        )
        results = set(
            [
                image["image"]["imageDigest"]
                for image in get_image_resp.body["vulnerable_images"]
            ]
        )
        assert results == set(query.affected_images)

    @pytest.mark.parametrize(
        "query",
        [
            ImagesByVulnerabilityQuery(
                "GHSA-5mg8-w23w-74h3",
                [
                    "sha256:80a31c3ce2e99c3691c27ac3b1753163214494e9b2ca07bfdccf29a5cca2bfbe",
                    "sha256:406413437f26223183d133ccc7186f24c827729e1b21adc7330dd43fcdc030b3",
                    "sha256:fe3ca35038008b0eac0fa4e686bd072c9430000ab7d7853001bde5f5b8ccf60c",
                ],
                ImagesByVulnerabilityQueryOptions(
                    "Medium", "github:java", "guava", False
                ),
            ),
            ImagesByVulnerabilityQuery(
                "CVE-2011-3374",
                [
                    "sha256:406413437f26223183d133ccc7186f24c827729e1b21adc7330dd43fcdc030b3"
                ],
                ImagesByVulnerabilityQueryOptions(
                    "Negligible", "debian:10", "libapt-pkg5.0", False
                ),
            ),
            ImagesByVulnerabilityQuery(
                "CVE-2020-8177",
                [
                    "sha256:fe3ca35038008b0eac0fa4e686bd072c9430000ab7d7853001bde5f5b8ccf60c"
                ],
                ImagesByVulnerabilityQueryOptions("Medium", "rhel:7", "curl", False),
            ),
        ],
    )
    def test_query_by_vulnerability_arg_combinations(
        self,
        schema_validator,
        ingress_all_images,
        query,
    ):
        query_fields = [(k, v) for k, v in asdict(query.query_metadata).items()]
        for r in range(1, len(query_fields)):
            for query_combination in combinations(query_fields, r):
                query_dict = {k: v for k, v in query_combination}
                get_image_resp = policy_engine_api.users.get_images_by_vulnerability(
                    vulnerability_id=query.vulnerability_id, **query_dict
                )
                assert get_image_resp.code <= 300
                query_by_vuln_schema_validator = schema_validator(
                    "query_by_vulnerability.schema.json"
                )
                is_valid: bool = query_by_vuln_schema_validator.is_valid(
                    get_image_resp.body
                )
                assert is_valid, "\n".join(
                    [
                        str(e)
                        for e in query_by_vuln_schema_validator.iter_errors(
                            get_image_resp.body
                        )
                    ]
                )
                results = set(
                    [
                        image["image"]["imageDigest"]
                        for image in get_image_resp.body["vulnerable_images"]
                    ]
                )
                assert results == set(query.affected_images)
